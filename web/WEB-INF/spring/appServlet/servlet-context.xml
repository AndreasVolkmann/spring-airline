<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
<beans:bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory 
	<resources mapping="/resources/**" location="/resources/" />-->
	<beans:bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">

		<beans:property name="location" value="WEB-INF/Database.properties" />
	</beans:bean>

	<beans:bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<beans:property name="driverClass" value="${jdbc.driver}" />
		<beans:property name="jdbcUrl" value="${jdbc.url}" />
		<beans:property name="user" value="${jdbc.username}" />
		<beans:property name="password" value="${jdbc.password}" />
		<beans:property name="idleConnectionTestPeriod" value="200" />
		<beans:property name="unreturnedConnectionTimeout" value="9200" />
		<beans:property name="maxPoolSize" value="20" />
		<beans:property name="minPoolSize" value="3" />
		<beans:property name="debugUnreturnedConnectionStackTraces" value="true" />
	</beans:bean>

	<!-- Hibernate 4 SessionFactory Bean definition -->
	<beans:bean id="hibernate4AnnotatedSessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="packagesToScan" >
			<beans:list>
				<beans:value>com.airline.model</beans:value>
			</beans:list>
		</beans:property>
		<beans:property name="hibernateProperties">
			<beans:props>
				<beans:prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</beans:prop>
				<beans:prop key="hibernate.show_sql">true</beans:prop>
				<beans:prop key="hibernate.format_sql">false</beans:prop>
				<beans:prop key="hibernate.use_sql_comments">false</beans:prop>
				
				<beans:prop key="hibernate.cache.use_second_level_cache">false</beans:prop>
				<beans:prop key="hibernate.cache.use_query_cache">false</beans:prop>
				<beans:prop key="current_session_context_class">thread</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>
	
	<!-- Configure to plugin JSON as request and response in method handler -->
    <beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <beans:property name="messageConverters">
            <beans:list>
                <beans:ref bean="jsonMessageConverter"/>
            </beans:list>
        </beans:property>
    </beans:bean>
     
    <!-- Configure bean to convert JSON to POJO and vice versa -->
    <beans:bean id="jsonMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
    </beans:bean> 
    
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<beans:bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	
	<!-- DAO layers -->
	
	<beans:bean id="flightInstanceDAOImpl" class="com.airline.dao.FlightInstanceDAOImpl">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	
	<beans:bean id="flightDAOImpl" class="com.airline.dao.FlightDAOImpl">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	
	<beans:bean id="reservationDAOImpl" class="com.airline.dao.ReservationDAOImpl">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	
		
	<!-- DAO layer end -->
	
	<!--  Service Layers -->
	
	<beans:bean id="airlineServiceImpl" class="com.airline.service.AirlineServiceImpl">
	    <beans:property name="flightInstanceDAOImpl" ref="flightInstanceDAOImpl"></beans:property>
	    <beans:property name="flightDAOImpl" ref="flightDAOImpl"></beans:property>
	    <beans:property name="reservationDAOImpl" ref="reservationDAOImpl"></beans:property>
	</beans:bean>
	
		<!--  Service Layers end -->
	
	
	<context:component-scan base-package="com.airline.controller" />

</beans:beans>
